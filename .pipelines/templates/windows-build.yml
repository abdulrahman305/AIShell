parameters:
  architecture: 'x64'

jobs:
- job: build_${{ parameters.architecture }}
  displayName: Build Windows ${{ parameters.architecture }}
  condition: succeeded()
  pool:
    type: windows
  variables:
  - name: runCodesignValidationInjection
    value: false
  - name: NugetSecurityAnalysisWarningLevel
    value: none
  - group: DotNetPrivateBuildAccess
  - group: certificate_logical_to_actual
  - name: ob_outputDirectory
    value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
  - name: repoRoot
    value: $(Build.SourcesDirectory)\AIShell
  - name: ob_sdl_codeSignValidation_enabled
    value: false
  - name: ob_sdl_tsa_configFile
    value: $(repoRoot)\.config\tsaoptions.json
  - name: Architecture
    value: ${{ parameters.architecture }}
  - name: Runtime
    value: 'win-$(Architecture)'
  - name: ob_sdl_sbom_packageName
    value: 'AIShell.Windows.${{ parameters.architecture }}'
  #CodeQL tasks added manually to workaround signing failures
  - name: ob_sdl_codeql_compiled_enabled
    value: false

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true

  - pwsh: |
      Get-ChildItem Env:
    displayName: Capture environment variables
    env:
      ob_restore_phase: true

  - template: /.pipelines/templates/update-nuget-config.yml@self
    parameters:
      repoRoot: $(repoRoot)

  # Add CodeQL Init task right before your 'Build' step.
  - task: CodeQL3000Init@0
    env:
      ob_restore_phase: true
    inputs:
      Enabled: true
      Language: csharp

  - pwsh: |
      Import-Module $(repoRoot)/build.psm1 -Force
      Install-Dotnet

      $runtime = '$(Runtime)'
      Write-Verbose "Building with Runtime: $runtime" -Verbose
      Start-Build -Runtime $runtime -Configuration Release -Clean -NotIncludeModule -Verbose

      $outputJson = '$(repoRoot)/_build_output_.json'
      if (Test-Path $outputJson) {
        $result = Get-Content $outputJson | ConvertFrom-Json
        Write-Verbose "App path: $($result.App)" -Verbose

        $vstsCommandString = "vso[task.setvariable variable=AppDir]$($result.App)"
        Write-Host ("sending " + $vstsCommandString)
        Write-Host "##$vstsCommandString"
      }
    displayName: 'Build Windows-$(Architecture)'
    env:
      ob_restore_phase: true

  # Add CodeQL Finalize task right after your 'Build' step.
  - task: CodeQL3000Finalize@0
    env:
      ob_restore_phase: true

  - pwsh: |
      Get-ChildItem $(AppDir) | Out-String -width 500 -Stream
    displayName: 'List build artifacts'
    env:
      ob_restore_phase: true

  - template: /.pipelines/templates/sign-files.yml@self
    parameters:
      appPath: '$(AppDir)'
      repoRoot: '$(repoRoot)'

  - template: /.pipelines/templates/finalize.yml@self
