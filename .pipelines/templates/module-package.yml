jobs:
- job: package
  displayName: Package AIShell module
  condition: succeeded()
  pool:
    type: linux

  variables:
    - name: runCodesignValidationInjection
      value: false
    - name: nugetMultiFeedWarnLevel
      value: none
    - name: NugetSecurityAnalysisWarningLevel
      value: none
    - name: skipNugetSecurityAnalysis
      value: true
    - group: DotNetPrivateBuildAccess
    - group: certificate_logical_to_actual
    - name: ob_sdl_sbom_enabled
      value: true
    - name: ob_outputDirectory
      value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
    - name: repoRoot
      value: $(Build.SourcesDirectory)/AIShell
    - name: ob_sdl_binskim_enabled
      value: true
    - name: ob_sdl_tsa_configFile
      value: $(repoRoot)/.config/tsaoptions.json
    - name: ob_signing_setup_enabled
      value: true
    - name: ob_sdl_codeql_compiled_enabled
      value: false

  steps:
  - checkout: self
    clean: true
    env:
      ob_restore_phase: true

  - pwsh: |
      Get-ChildItem -Path env:
    displayName: Capture environment
    env:
      ob_restore_phase: true

  - download: AIShellBuildPipeline
    artifact: drop_module_sign
    displayName: Download signed artifacts
    env:
      ob_restore_phase: true

  - pwsh: |
      $signedFilePath = "$(Pipeline.Workspace)/AIShellBuildPipeline/drop_module_sign"
      Write-Verbose -Verbose "Downloaded artifacts: "
      Get-ChildItem $signedFilePath -Recurse | Out-String -Width 500 -Stream

      $moduleFolder = "$(Pipeline.Workspace)/AIShellBuildPipeline/AIShell"
      $null = New-Item -ItemType Directory -Path $moduleFolder -Force

      Write-Verbose -Verbose "Delete SBOM files ..."
      Remove-Item -Path "$signedFilePath/_manifest" -Recurse -Force

      Write-Verbose -Verbose "Move module files to the 'AIShell' module folder: "
      Copy-Item -Path "$signedFilePath/*" -Destination $moduleFolder -Recurse -Force -Verbose
      Get-ChildItem $moduleFolder -Recurse | Out-String -Width 500 -Stream
    displayName: 'List downloaded files'
    # Diagnostics is not critical it passes every time it runs
    continueOnError: true
    env:
      ob_restore_phase: true

  - pwsh: |
      $moduleFolder = "$(Pipeline.Workspace)/AIShellBuildPipeline/AIShell"
      $nugetPath = "$(Pipeline.Workspace)/AIShellBuildPipeline/NuGetPackage"

      New-Item -Path $nugetPath -ItemType Directory > $null
      $vstsCommandString = "vso[task.setvariable variable=NugetPath]$nugetPath"
      Write-Host ("sending " + $vstsCommandString)
      Write-Host "##$vstsCommandString"

      try {
        $RepoName = "PSRLLocal"
        Register-PSResourceRepository -Name $RepoName -Uri $nugetPath -Trusted
        Publish-PSResource -Repository $RepoName -Path $moduleFolder -SkipModuleManifestValidate
      } finally {
        Unregister-PSResourceRepository -Name $RepoName -ErrorAction SilentlyContinue
      }
      Get-ChildItem -Path $nugetPath | Out-String -Width 500 -Stream
    displayName: 'Create the NuGet package'
    env:
      ob_restore_phase: true

  - task: onebranch.pipeline.signing@1
    displayName: Sign module nupkg
    inputs:
      command: 'sign'
      signing_profile: external_distribution
      files_to_sign: '*.nupkg'
      search_root: $(NugetPath)

  - task: CopyFiles@2
    displayName: Upload module nupkg
    inputs:
      SourceFolder: $(NugetPath)
      Contents: '**/*'
      TargetFolder: $(ob_outputDirectory)
